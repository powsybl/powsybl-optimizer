###############################################################################
#
# Copyright (c) 2022 2023 2024, RTE (http://www.rte-france.com)
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# SPDX-License-Identifier: MPL-2.0
#
###############################################################################

###############################################################################
# Reactive OPF
# Author:  Jean Maeght 2022 2023
# Author:  Manuel Ruiz 2023 2024
###############################################################################

printf{LOG_DEBUG} "\n* Rounding the transformers taps\n";
# Round all the taps of the optimized transformers
for{(qq,m,n) in BRANCHCC_REGL_VAR}{
    let temp1 := min{(1,regl_table[1,branch_ptrRegl[1,qq,m,n]],tap) in TAPS}
            abs(branch_Ror_var[qq,m,n]-tap_ratio[1,regl_table[1,branch_ptrRegl[1,qq,m,n]],tap]);
    let temp2 := min{(1,regl_table[1,branch_ptrRegl[1,qq,m,n]],tap) in TAPS:
            abs(branch_Ror_var[qq,m,n]-tap_ratio[1,regl_table[1,branch_ptrRegl[1,qq,m,n]],tap])<=1.00001*temp1}tap; # closest tap
    let temp1 := tap_ratio[1,regl_table[1,branch_ptrRegl[1,qq,m,n]],temp2]; # transformer ratio of closest tap

    printf{LOG_DEBUG} "REGL=%Q ptrRegl=%i regl_table=%i Ror_var=%f -> tap=%i tap_ratio=%f err=%f\n",
        branch_id[1,qq,m,n],branch_ptrRegl[1,qq,m,n],regl_table[1,branch_ptrRegl[1,qq,m,n]],
        branch_Ror_var[qq,m,n], temp2, temp1,
        abs(branch_Ror_var[qq,m,n]-temp1);
    let branch_Ror_var[qq,m,n] := temp1;
}

printf{LOG_DEBUG} "* Fixing all variable transformer ratios in next optimization\n\n";
fix{(qq,m,n) in BRANCHCC_REGL_VAR} branch_Ror_var[qq,m,n];

# solves acopf with new transformer ratios
solve problem_acopf_objective;

# add iterations of the second acopf solving
let nb_iter_total := nb_iter_total + nb_iter_last;