###############################################################################
#
# Copyright (c) 2022,2023 RTE (http://www.rte-france.com), Coreso and TSCNet Services 
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
###############################################################################

###############################################################################
# Divergence analysis
# Author : Jean Maeght 2022 2023
# Author : Pierre Arvy 2023
###############################################################################

########################################################################################
#                                                                                      #
#                        Printing some information on slack variables                  #
#                                                                                      #
########################################################################################

param abs_mean_s1 default 0;
param abs_mean_sigma1 default 0;
param abs_mean_sigma2 default 0;
param abs_mean_sigma3 default 0;
param abs_mean_sigma4 default 0;
param abs_mean_sigma5 default 0;
param abs_mean_sigma6 default 0;
param abs_mean_sigma7 default 0;
param abs_mean_sigma8 default 0;

if final_status == "OK" then {

  # ... s1 slack variable
  printf "\n[INFO] Maximal |s1| computed : %.6f\n", (max {p in BUSCC_PV} abs(s1[p]));
  let abs_mean_s1 := (sum {p in BUSCC_PV} abs(s1[p])) / card(BUSCC_PV);
  printf "[INFO] Mean abs value of s1 coordinates : %.6f\n", abs_mean_s1;
  printf "[INFO] Standard deviation abs of s1 coordinates : %.6f\n", 
        ((sum {p in BUSCC_PV} (abs(s1[p]) - abs_mean_s1)**2) / card(BUSCC_PV));

  # ... sigma1 slack variable
  if card(BRANCHCC_TRANSFORMER) > 0 then {
      printf "\n[INFO] Maximal |sigma1| computed : %.6f\n",
      (max {(qq,m,n) in BRANCHCC_TRANSFORMER} abs(sigma1[qq,m,n]));
      let abs_mean_sigma1 := (sum {(qq,m,n) in BRANCHCC_TRANSFORMER} abs(sigma1[qq,m,n])) / card(BRANCHCC_TRANSFORMER);
      printf "[INFO] Mean abs value of sigma1 coordinates : %.6f\n", abs_mean_sigma1;
      printf "[INFO] Standard deviation abs value of sigma1 coordinates : %.6f\n", 
            ((sum {(qq,m,n) in BRANCHCC_TRANSFORMER} (abs(sigma1[qq,m,n]) - abs_mean_sigma1)**2) / card(BRANCHCC_TRANSFORMER));
  } else {
      printf "\n[WARNING] No rtc/ptc so no sigma1 penalization.\n";
  }

  # ... sigma2 slack variable
  printf "\n[INFO] Maximal |sigma2| computed : %.6f\n",
      (max {(qq,m,n) in BRANCHCC_PENALIZED} abs(sigma2[qq,m,n]));
  let abs_mean_sigma2 := (sum {(qq,m,n) in BRANCHCC_PENALIZED} abs(sigma2[qq,m,n])) / card(BRANCHCC_PENALIZED);
  printf "[INFO] Mean abs value of sigma2 coordinates : %.6f\n", abs_mean_sigma2;
  printf "[INFO] Standard deviation abs value of sigma2 coordinates : %.6f\n", 
        ((sum {(qq,m,n) in BRANCHCC_PENALIZED} (abs(sigma2[qq,m,n]) - abs_mean_sigma2)**2) / card(BRANCHCC_PENALIZED));

  # ... sigma3 slack variable
  if card(BRANCHCC_TRANSFORMER) > 0 then {
      printf "\n[INFO] Maximal |sigma3| computed : %.6f\n",
            (max {(qq,m,n) in BRANCHCC_TRANSFORMER} abs(sigma3[qq,m,n]));
      let abs_mean_sigma3 := (sum {(qq,m,n) in BRANCHCC_TRANSFORMER} abs(sigma3[qq,m,n])) / card(BRANCHCC_TRANSFORMER);
      printf "[INFO] Mean abs value of sigma3 coordinates : %.6f\n", abs_mean_sigma3;
      printf "[INFO] Standard deviation abs value of sigma3 coordinates : %.6f\n", 
            ((sum {(qq,m,n) in BRANCHCC_TRANSFORMER} (abs(sigma3[qq,m,n]) - abs_mean_sigma3)**2) / card(BRANCHCC_TRANSFORMER));
  } else {
      printf "\n[WARNING] No rtc/ptc so no sigma3 penalization.\n";
  }
  # ... sigma4 slack variable
  printf "\n[INFO] Maximal |sigma4| computed : %.6f\n",
      (max {(qq,m,n) in BRANCHCC_PENALIZED} abs(sigma4[qq,m,n]));
  let abs_mean_sigma4 := (sum {(qq,m,n) in BRANCHCC_PENALIZED} abs(sigma4[qq,m,n])) / card(BRANCHCC_PENALIZED);
  printf "[INFO] Mean abs value of sigma4 coordinates : %.6f\n", abs_mean_sigma4;
  printf "[INFO] Standard deviation abs value of sigma4 coordinates : %.6f\n", 
        ((sum {(qq,m,n) in BRANCHCC_PENALIZED} (abs(sigma4[qq,m,n]) - abs_mean_sigma4)**2) / card(BRANCHCC_PENALIZED));

  # ... sigma5 slack variable
  printf "\n[INFO] Maximal |sigma5| computed : %.6f\n",
      (max {(qq,m,n) in BRANCHCC_PENALIZED} abs(sigma5[qq,m,n]));
  let abs_mean_sigma5 := (sum {(qq,m,n) in BRANCHCC_PENALIZED} abs(sigma5[qq,m,n])) / card(BRANCHCC_PENALIZED);
  printf "[INFO] Mean abs value of sigma5 coordinates : %.6f\n", abs_mean_sigma5;
  printf "[INFO] Standard deviation abs value of sigma5 coordinates : %.6f\n", 
        ((sum {(qq,m,n) in BRANCHCC_PENALIZED} (abs(sigma5[qq,m,n]) - abs_mean_sigma5)**2) / card(BRANCHCC_PENALIZED));

  # ... sigma6 slack variable
  printf "\n[INFO] Maximal |sigma6| computed : %.6f\n",
      (max {(qq,m,n) in BRANCHCC_PENALIZED} abs(sigma6[qq,m,n]));
  let abs_mean_sigma6 := (sum {(qq,m,n) in BRANCHCC_PENALIZED} abs(sigma6[qq,m,n])) / card(BRANCHCC_PENALIZED);
  printf "[INFO] Mean abs value of sigma6 coordinates : %.6f\n", abs_mean_sigma6;
  printf "[INFO] Standard deviation abs value of sigma6 coordinates : %.6f\n", 
        ((sum {(qq,m,n) in BRANCHCC_PENALIZED} (abs(sigma6[qq,m,n]) - abs_mean_sigma6)**2) / card(BRANCHCC_PENALIZED));

  # ... sigma7 slack variable
  printf "\n[INFO] Maximal |sigma7| computed : %.6f\n",
      (max {(qq,m,n) in BRANCHCC_PENALIZED} abs(sigma7[qq,m,n]));
  let abs_mean_sigma7 := (sum {(qq,m,n) in BRANCHCC_PENALIZED} abs(sigma7[qq,m,n])) / card(BRANCHCC_PENALIZED);
  printf "[INFO] Mean abs value of sigma7 coordinates : %.6f\n", abs_mean_sigma7;
  printf "[INFO] Standard deviation abs value of sigma7 coordinates : %.6f\n", 
        ((sum {(qq,m,n) in BRANCHCC_PENALIZED} (abs(sigma7[qq,m,n]) - abs_mean_sigma7)**2) / card(BRANCHCC_PENALIZED));

  # ... sigma8 slack variable
  printf "\n[INFO] Maximal |sigma8| computed : %.6f\n",
      (max {(qq,m,n) in BRANCHCC_PENALIZED} abs(sigma8[qq,m,n]));
  let abs_mean_sigma8 := (sum {(qq,m,n) in BRANCHCC_PENALIZED} abs(sigma8[qq,m,n])) / card(BRANCHCC_PENALIZED);
  printf "[INFO] Mean abs value of sigma8 coordinates : %.6f\n", abs_mean_sigma8;
  printf "[INFO] Standard deviation abs value of sigma8 coordinates : %.6f\n", 
        ((sum {(qq,m,n) in BRANCHCC_PENALIZED} (abs(sigma8[qq,m,n]) - abs_mean_sigma8)**2) / card(BRANCHCC_PENALIZED));

  close (fileOut);
}